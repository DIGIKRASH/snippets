{
  "redux-slice-api": {
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
    "prefix": "rxx",
    "body": [
      "import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';",
			"import axios from 'axios';",
      "import { T${1/(.*)/${1:/capitalize}/}Slice, T$2, $2Status } from './types';",
      "",
      "export const fetch${1/(.*)/${1:/capitalize}/} = createAsyncThunk<T$2[]>(",
			"	'${1/(.*)/${1:/downcase}/}/fetch${1/(.*)/${1:/capitalize}/}Status',",
			"	async () => {",
			"		const { data } = await axios.get<T$2[]>(",
			"			''",
			"		);",
			"		return data;",
			"	}",
			");",
      "",
      "const initialState: T${1/(.*)/${1:/capitalize}/}Slice = {",
      "	status: $2Status.LOADING,",
      "	items: [],",
      "};",
      "",
      "const ${1/(.*)/${1:/downcase}/}Slice = createSlice({",
      "	name: '${1/(.*)/${1:/downcase}/}',",
      "	initialState,",
      "	reducers: {",
      "		set${1/(.*)/${1:/capitalize}/}(state, { payload }: PayloadAction<T$2[]>) {",
      "			",
      "		},",
      "	},",
			"	extraReducers: (builder) => {",
			"		builder.addCase(fetch${1/(.*)/${1:/capitalize}/}.pending, (state) => {",
			"			state.status = $2Status.LOADING;",
			"			state.items = [];",
			"		});",
			"		builder.addCase(fetch${1/(.*)/${1:/capitalize}/}.fulfilled, (state, { payload }) => {",
			"			state.status = $2Status.SUCCESS;",
			"			state.items = payload;",
			"		});",
			"		builder.addCase(fetch${1/(.*)/${1:/capitalize}/}.rejected, (state) => {",
			"			state.status = $2Status.ERROR;",
			"			state.items = [];",
			"		});",
			"	},"
      "});",
      "",
      "export const { set${1/(.*)/${1:/capitalize}/} } = ${1/(.*)/${1:/downcase}/}Slice.actions;",
      "",
      "export default ${1/(.*)/${1:/downcase}/}Slice.reducer;"
    ],
    "description": "redux-slice-api"
  }
}